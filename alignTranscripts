#!/usr/bin/env python

import os
import sys
import argparse
import string
import tempfile
import subprocess

LASTZ = 'lastz'
BEDTOOLS = 'bedtools'
FASTAFROMBED = 'fastaFromBed'


def intArray(array):
	for i in range(len(array)):
		if array[i] != "": array[i] = int(array[i])
	return array

def convertToGeneCoords(base, exonSizes, exonStarts, numExons):
	block = 0
	for i in range(numExons):
		if base <= block + exonSizes[i]:
			newBase = exonStarts[i] + base - block
			break
		block += exonSizes[i]
	return newBase

def inExon(base, exonStarts, exonSizes, numExons, strand, geneSize):
	#print strand
	if strand == "-": base = geneSize - base
	for i in range(numExons):
		if (base >= exonStarts[i] and base < (exonStarts[i] + exonSizes[i])):
			return True
	return False

def writePaddedBed(gene, pad):
	gene[1] = max(0, int(gene[1])-pad)
	gene[2] = int(gene[2])+pad
	
	tmpFd, tmpPath = tempfile.mkstemp()
	tmp = os.fdopen(tmpFd, 'w')
	tmp.write("%s\t%i\t%i\t%s\n" % (gene[0], gene[1], gene[2], gene[3]))
	return tmpPath

def getFa(bed, fasta):
	tmpFd, tmpPath = tempfile.mkstemp()
	#cmd = "%s -fi %s -bed %s -fo %s -name" % (FASTAFROMBED, fasta, bed, tmpPath)
	cmd = [FASTAFROMBED, "-fi", fasta, "-bed", bed, "-fo", tmpPath, "-name"]
	subprocess.check_call(cmd)
	return tmpPath

def main():
	parser = argparse.ArgumentParser(description='''
		Wrapper script for lastz to align two transcripts and report back exonic and sequence identity.\n
		If aligning non-coding genes, set --noncoding flag for more sensitive alignment.
	''')
	parser.add_argument('bedA', type=file,  help='bed file A')
	parser.add_argument('genomeFastaA', type=str, help='fasta file A')
	parser.add_argument('bedB', type=file, help='bed file B')
	parser.add_argument('genomeFastaB', type=str, help='fasta file B')
	parser.add_argument('out_prefix', type=str, help='out prefix')
	parser.add_argument('--geneA', type=str, help='if bedA has more than one entry, specify which gene to align')
	parser.add_argument('--geneB', type=str, help='if bedB has more than one entry, specify which gene to align')
	parser.add_argument('--pad', type=int, default=15000)
	parser.add_argument('--gap_open', type=int, default=250)
	parser.add_argument('--gap_extend', type=int, default=30)
	parser.add_argument('--unmask', action='store_true', help='mask repeats when aligning')
	parser.add_argument('--bedtools_path', type=str)
	parser.add_argument('--lastz_path', type=str)

	args = parser.parse_args()

	if args.bedtools_path is not None:
		global BEDTOOLS
		global FASTAFROMBED
		BEDTOOLS  = args.bedtools_path+"/bedtools"
		FASTAFROMBED = args.bedtools_path+"/fastaFromBed"
	
	if args.lastz_path is not None:
		global LASTZ
		LASTZ = args.lastz_path+"/lastz"


	alignment = open(args.out_prefix+".alignment_identity.txt", 'w')
	mafout = open(args.out_prefix+".maf", 'w')	
	#read in bed file A into array geneA
	geneA = []
	if args.geneA is None:
		geneA = args.bedA.readline().split()
	else:
		for line in args.bedA.readlines():
			if line.strip() == "": continue
			line = line.split()
			if (line[3].strip() == args.geneA.strip()): 
				geneA = line
				break
		if (len(geneA)==0):
			print "geneA %s not found! exiting..." % args.geneA
			sys.exit(1)

	#read in bed file B
	geneB = []
	if args.geneB is None:
		geneB = args.bedB.readline().split()
	else:
		for line in args.bedB.readlines():
			if line.strip() == "": continue
			line = line.split()
			if (line[3].strip() == args.geneB.strip()): 
				geneB = line
				break
		if (len(geneB)==0):
			print "geneB %s not found! exiting..." % args.geneB
			sys.exit(1)
	
	paddedABedPath = writePaddedBed(geneA, args.pad)
	paddedBBedPath = writePaddedBed(geneB, args.pad)

	paddedAFaPath = getFa(paddedABedPath, args.genomeFastaA)
	paddedBFaPath = getFa(paddedBBedPath, args.genomeFastaB)

	#lastz
	#cmd = "%s %s %s --format=maf --chain --gap=%d,%d" % (LASTZ, paddedAFaPath, paddedBFaPath, args.gap_open, args.gap_extend)

	tmpFd, tmpPath = tempfile.mkstemp()
	if args.unmask:
		cmd = [LASTZ, paddedAFaPath+"[unmask]", paddedBFaPath+"[unmask]", '--format=maf', '--output=%s' % tmpPath, '--chain', '--gap=%d,%d' %(args.gap_open, args.gap_extend)]
	else:
		cmd = [LASTZ, paddedAFaPath, paddedBFaPath, '--format=maf', '--output=%s' % tmpPath, '--chain', '--gap=%d,%d' %(args.gap_open, args.gap_extend)]
	
	nullFd, nullPath = tempfile.mkstemp()
	null = open(nullPath, 'w')

	subprocess.check_call(cmd, stderr = null)
	null.close()

	mafFile = open(tmpPath, 'r')
	maf = mafFile.readlines()
	mafFile.close()
	#maf, err = proc.communicate()
	#maf =  maf.split("\n")	
	#print maf

	cmd = ['rm', paddedABedPath, paddedBBedPath, paddedAFaPath, paddedBFaPath, tmpPath, nullPath]
	subprocess.check_call(cmd)	
	
	chrA = geneA[0].strip()
	geneAStart = int(geneA[1])+args.pad
	geneAEnd = int(geneA[2])-args.pad
	geneAName = geneA[3]
	strandA = geneA[5].strip()
	exonStartsA = intArray(geneA[11].split(','))
	exonSizesA = intArray(geneA[10].split(','))
	numExonsA = int(geneA[9])
	geneASize = geneAEnd - geneAStart
	exonASize = 0
	for i in range(numExonsA):
		exonASize += exonSizesA[i]

	chrB = geneB[0].strip()
	geneBStart = int(geneB[1])+args.pad
	geneBEnd = int(geneB[2])-args.pad
	geneBName = geneB[3]
	strandB = geneB[5].strip()
	if strandB == "*": strandB = "+"
	exonStartsB = intArray(geneB[11].split(','))
	exonSizesB = intArray(geneB[10].split(','))
	numExonsB = int(geneB[9])
	geneBSize = geneBEnd - geneBStart
	
	#CRAWL THROUGH ALIGNMENTS
	
	id = 0
	exonId = 0

	stringB = ""
	stringA = ""
	baseB = -1
	baseA = -1

	counter = 0
	
	alignment.write("alignmentID\tgeneA\tgeneB\texonID\tgeneID\n")

	for line in maf:
		line = line.strip()
		if line.startswith("#"): 
			mafout.write(line+"\n")

		if line.startswith("a"): 
			counter = counter + 1
			a = line
			score = line.split("=")[1]
		
		if line.startswith("s"):
			if stringA == "":
				sA = line.split()
				stringA = sA[6].strip()
				baseA = int(sA[2])
				dirA = sA[4].strip()
			else:
				sB = line.split()
				stringB = sB[6].strip()
				baseB = int(sB[2])
				dirB = sB[4].strip()
		#at line break, reset
		if line == "" and stringA !="":
			if exonId == 0 and id == 0:
				counter = counter - 1
			else:
				alignment.write("%d\t%s\t%s\t%0.3f\t%0.3f\n" % (counter, geneAName, geneBName, exonId / (exonASize*1.0), id / (geneASize*1.0)))
				#write maf
				mafout.write(a+"\n")
				
				sA[1] = chrA 
				start = int(sA[2])
				if (dirA == "+"): start = geneAStart - args.pad + start
				else: start = geneAEnd + args.pad - start
				sA[2] = str(start)

				mafout.write(sA[0])
				for i in range(len(sA)-1):
					mafout.write(" "+sA[i+1])
				mafout.write("\n")

				sB[1] = chrB
				start = int(sB[2])
				if (dirB == "+"): start = geneBStart - args.pad + start
				else: start = geneBEnd + args.pad - start
				sB[2] = str(start)

				mafout.write(sB[0])
				for i in range(len(sB)-1):
					mafout.write(" "+sB[i+1])
				mafout.write("\n\n")


			exonId = 0
			id = 0
			stringB = ""
			stringA = ""

		if stringB != "" and stringA !="":
			for i in range(len(stringA)):
				if dirA == "+":
					baseARel = baseA - args.pad
					baseAGen = geneAStart - args.pad + baseA
				else:
					baseARel = geneASize + args.pad - baseA
					baseAGen = geneAEnd + args.pad - baseA

				if dirB == "+":
					baseBRel = baseB - args.pad
					baseBGen = geneBStart - args.pad + baseB
				else:
					baseBRel = geneBSize + args.pad - baseB
					baseBGen = geneBEnd + args.pad - baseB

				if stringB[i]==stringA[i] and baseARel >= 0 and baseARel < geneASize and stringB[i] != "-" and baseBRel >= 0 and baseBRel < geneBSize:
					id += 1
					if inExon(baseARel, exonStartsA, exonSizesA, numExonsA, strandA, geneASize) and inExon(baseBRel, exonStartsB, exonSizesB, numExonsB, strandB, geneBSize):
						exonId += 1

				if stringB[i] !="-":
					baseB += 1
				if stringA[i] !="-": 
					baseA += 1

if __name__ == "__main__":
	main()
